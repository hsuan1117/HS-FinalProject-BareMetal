/*
 * main.c
 *
 *  Created on: Jun 11, 2018
 *      Author: arthur
 */

#include "xparameters.h"
#include "xil_printf.h"
#include "sleep.h"
#include<stdio.h>
#include "PmodESP32.h"

#ifdef __MICROBLAZE__
#define HOST_UART_DEVICE_ID XPAR_AXI_UARTLITE_0_BASEADDR
#define HostUart XUartLite
#define HostUart_Config XUartLite_Config
#define HostUart_CfgInitialize XUartLite_CfgInitialize
#define HostUart_LookupConfig XUartLite_LookupConfig
#define HostUart_Recv XUartLite_Recv
#define HostUartConfig_GetBaseAddr(CfgPtr) (CfgPtr->RegBaseAddr)
#include "xuartlite.h"
#include<stdbool.h>
#include "xil_cache.h"
#else
#define HOST_UART_DEVICE_ID XPAR_PS7_UART_0_DEVICE_ID
#define HostUart XUartPs
#define HostUart_Config XUartPs_Config
#define HostUart_CfgInitialize XUartPs_CfgInitialize
#define HostUart_LookupConfig XUartPs_LookupConfig
#define HostUart_Recv XUartPs_Recv
#define HostUartConfig_GetBaseAddr(CfgPtr) (CfgPtr->BaseAddress)
#include "xuartps.h"
#endif

#define PMODESP32_UART_BASEADDR XPAR_PMODESP32_0_AXI_LITE_UART_BASEADDR
#define PMODESP32_GPIO_BASEADDR XPAR_PMODESP32_0_AXI_LITE_GPIO_BASEADDR

void EnableCaches();
void DisableCaches();
void DemoInitialize();
void DemoRun();
void DemoCleanup();

PmodESP32 myESP32;
HostUart myHostUart;
XGpio gpio;
u32 led;

void DemoInitialize () {
	XGpio_Initialize(&gpio, 0);
	XGpio_SetDataDirection(&gpio, 2, 0x00000000); // set LED GPIO channel tristates to All Output

	HostUart_Config *CfgPtr;
	EnableCaches();
	ESP32_Initialize(&myESP32, PMODESP32_UART_BASEADDR, PMODESP32_GPIO_BASEADDR);
	CfgPtr = HostUart_LookupConfig(HOST_UART_DEVICE_ID);
	HostUart_CfgInitialize(&myHostUart, CfgPtr, HostUartConfig_GetBaseAddr(CfgPtr));
}

u8 recv_buffer;
u32 num_received;
void readUntilOK() {
	int detectO = 0;
	int detectK = 0;
	while(1){
		if(detectO && detectK) break;
		num_received = ESP32_Recv(&myESP32, &recv_buffer, 1);
		if (num_received > 0) {
			if(recv_buffer == 'O') detectO = 1;
			if(recv_buffer == 'K') detectK = 1;
			xil_printf("%c", recv_buffer);
		}
	}
}

void setLED(int val) {
	led = 1<<val;
	XGpio_DiscreteWrite(&gpio, 2, led);
}

void DemoRun() {

	xil_printf("\r\nEXEC:\r\n");

//	char cmd[] = "AT\r\n";

//	while (1) {
//		// TODO: add exit functionality (ctrl-Z?)
//		num_received = ESP32_Recv(&myESP32, &recv_buffer, 1);
//		if (num_received > 0) {
//			xil_printf("%c", recv_buffer);
//		}
//
//		num_received = HostUart_Recv(&myHostUart, &recv_buffer, 1);
//
//		if (num_received > 0) {
//			xil_printf("%c", recv_buffer);
//			while (0 == ESP32_Send(&myESP32, &recv_buffer, 1));
//		}
//	}

//	ESP32_SendBuffer(&myESP32, cmd, strlen(cmd));
//	while(counter<100000){ ++counter; }

//	char cmd2[] = "AT+RST\r\n";
//	ESP32_SendBuffer(&myESP32, cmd2, strlen(cmd2));
//	counter=0;
//	while(counter<100000){ ++counter; }
//
//	char * str = malloc(sizeof(char) * 10);
//	int slen = 0;
//	while(1){
//		num_received = ESP32_Recv(&myESP32, &recv_buffer, 1);
//		if (num_received > 0) {
//			slen += num_received;
//		}
//	}

	u8 cmd3[] = "AT+CWJAP=\"ya526526\",\"0926553986\"\r\n";
//	u8 cmd3[] = "AT+CWJAP=\"Hsuan-iPhone\",\"password\"\r\n";
	ESP32_SendBuffer(&myESP32, cmd3, strlen(cmd3));
//	counter=0;
//	while(counter<100000){ ++counter; }
	readUntilOK();

//	u8 cmd5[] = "AT+CIPSTART=\"TCP\",\"t2.infra.hsuan.app\",80\r\n";
	u8 cmd5[] = "AT+CIPSTART=\"TCP\",\"192.168.1.18\",9090\r\n";
	ESP32_SendBuffer(&myESP32, cmd5, strlen((char*) cmd5));
	readUntilOK();

	u8 cmd01[] = "AT+CIPMODE=1\r\n";
	ESP32_SendBuffer(&myESP32, cmd01, strlen((char*) cmd01));
	readUntilOK();
	u8 cmd02[] = "AT+CIPSEND\r\n";
	ESP32_SendBuffer(&myESP32, cmd02, strlen((char*) cmd02));
	readUntilOK();
	setLED(1);


//	u8 command[40];
//	u8 finalcmd[40];
//	sprintf((char*)command, "GET http://t2.infra.hsuan.app\r\n");
//	u32 length = strlen((char*)command);
//	sprintf((char*)finalcmd, "AT+CIPSEND=%d\r\n", (int)length);
//	u32 cmdlength = strlen((char*)finalcmd);
//	ESP32_SendBuffer(&myESP32, finalcmd, cmdlength);
//	ESP32_SendBuffer(&myESP32, command, length);
//	readUntilOK();

	bool handshake = false;

	while(1){
		num_received = ESP32_Recv(&myESP32, &recv_buffer, 1);
		if (num_received > 0) {
			xil_printf("%c", recv_buffer);
		}

		if(!handshake) {
			u8 handshake_string[] = "handshake\n";
			ESP32_SendBuffer(&myESP32, handshake_string, strlen((char*) handshake_string));
			readUntilOK();
			handshake = true;
			setLED(2);
		}

//		num_received = HostUart_Recv(&myHostUart, &recv_buffer, 1);
//		if(recv_buffer == '+') break;
//		if (num_received > 0) {
//			xil_printf("%c", recv_buffer);
//			while (0 == ESP32_Send(&myESP32, &recv_buffer, 1));
//		}


		u8 get_cmd[] = "get\n";
		ESP32_SendBuffer(&myESP32, cmd02, strlen((char*) cmd02));
		readUntilOK();
	}

	u8 cmd00[] = "AT+CIPCLOSE\r\n";
	ESP32_SendBuffer(&myESP32, cmd00, strlen((char*) cmd00));
	xil_printf("close connection\r\n");
	readUntilOK();
}

void DemoCleanup() {
//	DisableCaches();
}


int main() {
	DemoCleanup();
	DemoInitialize();
	DemoRun();
	return 0;
}

void EnableCaches() {
#ifdef __MICROBLAZE__
#ifdef XPAR_MICROBLAZE_USE_DCACHE
   Xil_DCacheEnable();
#endif
#ifdef XPAR_MICROBLAZE_USE_ICACHE
   Xil_ICacheEnable();
#endif
#endif
}

void DisableCaches() {
#ifdef __MICROBLAZE__
#ifdef XPAR_MICROBLAZE_USE_DCACHE
   Xil_DCacheDisable();
#endif
#ifdef XPAR_MICROBLAZE_USE_ICACHE
   Xil_ICacheDisable();
#endif
#endif
}
